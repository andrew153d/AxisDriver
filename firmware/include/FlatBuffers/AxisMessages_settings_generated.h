// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AXISMESSAGESSETTINGS_AXISDRIVER_H_
#define FLATBUFFERS_GENERATED_AXISMESSAGESSETTINGS_AXISDRIVER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace AxisDriver {

struct VersionMessage;
struct VersionMessageBuilder;

struct I2CAddressMessage;
struct I2CAddressMessageBuilder;

struct EthernetAddressMessage;
struct EthernetAddressMessageBuilder;

struct EthernetPortMessage;
struct EthernetPortMessageBuilder;

struct MacAddressMessage;
struct MacAddressMessageBuilder;

struct SaveConfigurationMessage;
struct SaveConfigurationMessageBuilder;

struct VersionMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VersionMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAJOR = 4,
    VT_MINOR = 6,
    VT_PATCH = 8
  };
  uint16_t major() const {
    return GetField<uint16_t>(VT_MAJOR, 0);
  }
  uint16_t minor() const {
    return GetField<uint16_t>(VT_MINOR, 0);
  }
  uint16_t patch() const {
    return GetField<uint16_t>(VT_PATCH, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_MAJOR, 2) &&
           VerifyField<uint16_t>(verifier, VT_MINOR, 2) &&
           VerifyField<uint16_t>(verifier, VT_PATCH, 2) &&
           verifier.EndTable();
  }
};

struct VersionMessageBuilder {
  typedef VersionMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_major(uint16_t major) {
    fbb_.AddElement<uint16_t>(VersionMessage::VT_MAJOR, major, 0);
  }
  void add_minor(uint16_t minor) {
    fbb_.AddElement<uint16_t>(VersionMessage::VT_MINOR, minor, 0);
  }
  void add_patch(uint16_t patch) {
    fbb_.AddElement<uint16_t>(VersionMessage::VT_PATCH, patch, 0);
  }
  explicit VersionMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<VersionMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<VersionMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<VersionMessage> CreateVersionMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t major = 0,
    uint16_t minor = 0,
    uint16_t patch = 0) {
  VersionMessageBuilder builder_(_fbb);
  builder_.add_patch(patch);
  builder_.add_minor(minor);
  builder_.add_major(major);
  return builder_.Finish();
}

struct I2CAddressMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef I2CAddressMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint8_t value() const {
    return GetField<uint8_t>(VT_VALUE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE, 1) &&
           verifier.EndTable();
  }
};

struct I2CAddressMessageBuilder {
  typedef I2CAddressMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(uint8_t value) {
    fbb_.AddElement<uint8_t>(I2CAddressMessage::VT_VALUE, value, 0);
  }
  explicit I2CAddressMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<I2CAddressMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<I2CAddressMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<I2CAddressMessage> CreateI2CAddressMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t value = 0) {
  I2CAddressMessageBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct EthernetAddressMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EthernetAddressMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint32_t value() const {
    return GetField<uint32_t>(VT_VALUE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct EthernetAddressMessageBuilder {
  typedef EthernetAddressMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(uint32_t value) {
    fbb_.AddElement<uint32_t>(EthernetAddressMessage::VT_VALUE, value, 0);
  }
  explicit EthernetAddressMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EthernetAddressMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EthernetAddressMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EthernetAddressMessage> CreateEthernetAddressMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t value = 0) {
  EthernetAddressMessageBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct EthernetPortMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EthernetPortMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint32_t value() const {
    return GetField<uint32_t>(VT_VALUE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct EthernetPortMessageBuilder {
  typedef EthernetPortMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(uint32_t value) {
    fbb_.AddElement<uint32_t>(EthernetPortMessage::VT_VALUE, value, 0);
  }
  explicit EthernetPortMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EthernetPortMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EthernetPortMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EthernetPortMessage> CreateEthernetPortMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t value = 0) {
  EthernetPortMessageBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct MacAddressMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MacAddressMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAC_ADDRESS = 4
  };
  const ::flatbuffers::Vector<uint8_t> *mac_address() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_MAC_ADDRESS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MAC_ADDRESS) &&
           verifier.VerifyVector(mac_address()) &&
           verifier.EndTable();
  }
};

struct MacAddressMessageBuilder {
  typedef MacAddressMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_mac_address(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> mac_address) {
    fbb_.AddOffset(MacAddressMessage::VT_MAC_ADDRESS, mac_address);
  }
  explicit MacAddressMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MacAddressMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MacAddressMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MacAddressMessage> CreateMacAddressMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> mac_address = 0) {
  MacAddressMessageBuilder builder_(_fbb);
  builder_.add_mac_address(mac_address);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MacAddressMessage> CreateMacAddressMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *mac_address = nullptr) {
  auto mac_address__ = mac_address ? _fbb.CreateVector<uint8_t>(*mac_address) : 0;
  return AxisDriver::CreateMacAddressMessage(
      _fbb,
      mac_address__);
}

struct SaveConfigurationMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SaveConfigurationMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint8_t value() const {
    return GetField<uint8_t>(VT_VALUE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE, 1) &&
           verifier.EndTable();
  }
};

struct SaveConfigurationMessageBuilder {
  typedef SaveConfigurationMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(uint8_t value) {
    fbb_.AddElement<uint8_t>(SaveConfigurationMessage::VT_VALUE, value, 0);
  }
  explicit SaveConfigurationMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SaveConfigurationMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SaveConfigurationMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SaveConfigurationMessage> CreateSaveConfigurationMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t value = 0) {
  SaveConfigurationMessageBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

}  // namespace AxisDriver

#endif  // FLATBUFFERS_GENERATED_AXISMESSAGESSETTINGS_AXISDRIVER_H_
