// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AXISMESSAGESLED_AXISDRIVER_H_
#define FLATBUFFERS_GENERATED_AXISMESSAGESLED_AXISDRIVER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace AxisDriver {

struct LedStateMessage;
struct LedStateMessageBuilder;

struct LedColorMessage;
struct LedColorMessageBuilder;

struct LedStateMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LedStateMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  uint8_t value() const {
    return GetField<uint8_t>(VT_VALUE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VALUE, 1) &&
           verifier.EndTable();
  }
};

struct LedStateMessageBuilder {
  typedef LedStateMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(uint8_t value) {
    fbb_.AddElement<uint8_t>(LedStateMessage::VT_VALUE, value, 0);
  }
  explicit LedStateMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LedStateMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LedStateMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LedStateMessage> CreateLedStateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t value = 0) {
  LedStateMessageBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct LedColorMessage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LedColorMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LED_COLOR = 4
  };
  const ::flatbuffers::Vector<uint8_t> *led_color() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_LED_COLOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LED_COLOR) &&
           verifier.VerifyVector(led_color()) &&
           verifier.EndTable();
  }
};

struct LedColorMessageBuilder {
  typedef LedColorMessage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_led_color(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> led_color) {
    fbb_.AddOffset(LedColorMessage::VT_LED_COLOR, led_color);
  }
  explicit LedColorMessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LedColorMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LedColorMessage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LedColorMessage> CreateLedColorMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> led_color = 0) {
  LedColorMessageBuilder builder_(_fbb);
  builder_.add_led_color(led_color);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LedColorMessage> CreateLedColorMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *led_color = nullptr) {
  auto led_color__ = led_color ? _fbb.CreateVector<uint8_t>(*led_color) : 0;
  return AxisDriver::CreateLedColorMessage(
      _fbb,
      led_color__);
}

}  // namespace AxisDriver

#endif  // FLATBUFFERS_GENERATED_AXISMESSAGESLED_AXISDRIVER_H_
