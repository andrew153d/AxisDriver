// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AXISMESSAGESCOMMON_AXISDRIVER_H_
#define FLATBUFFERS_GENERATED_AXISMESSAGESCOMMON_AXISDRIVER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace AxisDriver {

struct Header;
struct HeaderBuilder;

struct Footer;
struct FooterBuilder;

enum MessageId : int8_t {
  MessageId_GetVersionId = 0,
  MessageId_SetI2CAddressId = 1,
  MessageId_GetI2CAddressId = 2,
  MessageId_SetEthernetAddressId = 3,
  MessageId_GetEthernetAddressId = 4,
  MessageId_SetEthernetPortId = 5,
  MessageId_GetEthernetPortId = 6,
  MessageId_GetMacAddressId = 7,
  MessageId_SaveConfigurationId = 8,
  MessageId_SetLedStateId = 9,
  MessageId_GetLedStateId = 10,
  MessageId_SetLedColorId = 11,
  MessageId_GetLedColorId = 12,
  MessageId_SetHomeDirectionId = 13,
  MessageId_GetHomeDirectionId = 14,
  MessageId_SetHomeThresholdId = 15,
  MessageId_GetHomeThresholdId = 16,
  MessageId_SetHomeSpeedId = 17,
  MessageId_GetHomeSpeedId = 18,
  MessageId_GetHomedStateId = 19,
  MessageId_HomeId = 20,
  MessageId_SetMotorStateId = 21,
  MessageId_GetMotorStateId = 22,
  MessageId_SetMotorBrakeId = 23,
  MessageId_GetMotorBrakeId = 24,
  MessageId_SetMaxSpeedId = 25,
  MessageId_GetMaxSpeedId = 26,
  MessageId_SetAccelerationId = 27,
  MessageId_GetAccelerationId = 28,
  MessageId_SetCurrentPositionId = 29,
  MessageId_GetCurrentPositionId = 30,
  MessageId_SetTargetPositionId = 31,
  MessageId_GetTargetPositionId = 32,
  MessageId_SetRelativeTargetPositionId = 33,
  MessageId_SetVelocityId = 34,
  MessageId_GetVelocityId = 35,
  MessageId_SetVelocityAndStepsId = 36,
  MessageId_StartPathId = 37,
  MessageId_SetHAEnableId = 38,
  MessageId_GetHAEnableId = 39,
  MessageId_SetHAModeId = 40,
  MessageId_GetHAModeId = 41,
  MessageId_SetHAIpAddressId = 42,
  MessageId_GetHAIpAddressId = 43,
  MessageId_SetHAVelocitySwitchOnSpeedId = 44,
  MessageId_GetHAVelocitySwitchOnSpeedId = 45,
  MessageId_SetHAVelocitySwitchOffSpeedId = 46,
  MessageId_GetHAVelocitySwitchOffSpeedId = 47,
  MessageId_SetHAPositionSwitchOnPositionId = 48,
  MessageId_GetHAPositionSwitchOnPositionId = 49,
  MessageId_SetHAPositionSwitchOffPositionId = 50,
  MessageId_GetHAPositionSwitchOffPositionId = 51,
  MessageId_SetHAVelocitySliderMinId = 52,
  MessageId_GetHAVelocitySliderMinId = 53,
  MessageId_SetHAVelocitySliderMaxId = 54,
  MessageId_GetHAVelocitySliderMaxId = 55,
  MessageId_SetHAPositionSliderMinId = 56,
  MessageId_GetHAPositionSliderMinId = 57,
  MessageId_SetHAPositionSliderMaxId = 58,
  MessageId_GetHAPositionSliderMaxId = 59,
  MessageId_SetHAMqttUserId = 60,
  MessageId_GetHAMqttUserId = 61,
  MessageId_SetHAMqttPasswordId = 62,
  MessageId_GetHAMqttPasswordId = 63,
  MessageId_SetHAMqttNameId = 64,
  MessageId_GetHAMqttNameId = 65,
  MessageId_SetHAMqttIconId = 66,
  MessageId_GetHAMqttIconId = 67,
  MessageId_MIN = MessageId_GetVersionId,
  MessageId_MAX = MessageId_GetHAMqttIconId
};

inline const MessageId (&EnumValuesMessageId())[68] {
  static const MessageId values[] = {
    MessageId_GetVersionId,
    MessageId_SetI2CAddressId,
    MessageId_GetI2CAddressId,
    MessageId_SetEthernetAddressId,
    MessageId_GetEthernetAddressId,
    MessageId_SetEthernetPortId,
    MessageId_GetEthernetPortId,
    MessageId_GetMacAddressId,
    MessageId_SaveConfigurationId,
    MessageId_SetLedStateId,
    MessageId_GetLedStateId,
    MessageId_SetLedColorId,
    MessageId_GetLedColorId,
    MessageId_SetHomeDirectionId,
    MessageId_GetHomeDirectionId,
    MessageId_SetHomeThresholdId,
    MessageId_GetHomeThresholdId,
    MessageId_SetHomeSpeedId,
    MessageId_GetHomeSpeedId,
    MessageId_GetHomedStateId,
    MessageId_HomeId,
    MessageId_SetMotorStateId,
    MessageId_GetMotorStateId,
    MessageId_SetMotorBrakeId,
    MessageId_GetMotorBrakeId,
    MessageId_SetMaxSpeedId,
    MessageId_GetMaxSpeedId,
    MessageId_SetAccelerationId,
    MessageId_GetAccelerationId,
    MessageId_SetCurrentPositionId,
    MessageId_GetCurrentPositionId,
    MessageId_SetTargetPositionId,
    MessageId_GetTargetPositionId,
    MessageId_SetRelativeTargetPositionId,
    MessageId_SetVelocityId,
    MessageId_GetVelocityId,
    MessageId_SetVelocityAndStepsId,
    MessageId_StartPathId,
    MessageId_SetHAEnableId,
    MessageId_GetHAEnableId,
    MessageId_SetHAModeId,
    MessageId_GetHAModeId,
    MessageId_SetHAIpAddressId,
    MessageId_GetHAIpAddressId,
    MessageId_SetHAVelocitySwitchOnSpeedId,
    MessageId_GetHAVelocitySwitchOnSpeedId,
    MessageId_SetHAVelocitySwitchOffSpeedId,
    MessageId_GetHAVelocitySwitchOffSpeedId,
    MessageId_SetHAPositionSwitchOnPositionId,
    MessageId_GetHAPositionSwitchOnPositionId,
    MessageId_SetHAPositionSwitchOffPositionId,
    MessageId_GetHAPositionSwitchOffPositionId,
    MessageId_SetHAVelocitySliderMinId,
    MessageId_GetHAVelocitySliderMinId,
    MessageId_SetHAVelocitySliderMaxId,
    MessageId_GetHAVelocitySliderMaxId,
    MessageId_SetHAPositionSliderMinId,
    MessageId_GetHAPositionSliderMinId,
    MessageId_SetHAPositionSliderMaxId,
    MessageId_GetHAPositionSliderMaxId,
    MessageId_SetHAMqttUserId,
    MessageId_GetHAMqttUserId,
    MessageId_SetHAMqttPasswordId,
    MessageId_GetHAMqttPasswordId,
    MessageId_SetHAMqttNameId,
    MessageId_GetHAMqttNameId,
    MessageId_SetHAMqttIconId,
    MessageId_GetHAMqttIconId
  };
  return values;
}

inline const char * const *EnumNamesMessageId() {
  static const char * const names[69] = {
    "GetVersionId",
    "SetI2CAddressId",
    "GetI2CAddressId",
    "SetEthernetAddressId",
    "GetEthernetAddressId",
    "SetEthernetPortId",
    "GetEthernetPortId",
    "GetMacAddressId",
    "SaveConfigurationId",
    "SetLedStateId",
    "GetLedStateId",
    "SetLedColorId",
    "GetLedColorId",
    "SetHomeDirectionId",
    "GetHomeDirectionId",
    "SetHomeThresholdId",
    "GetHomeThresholdId",
    "SetHomeSpeedId",
    "GetHomeSpeedId",
    "GetHomedStateId",
    "HomeId",
    "SetMotorStateId",
    "GetMotorStateId",
    "SetMotorBrakeId",
    "GetMotorBrakeId",
    "SetMaxSpeedId",
    "GetMaxSpeedId",
    "SetAccelerationId",
    "GetAccelerationId",
    "SetCurrentPositionId",
    "GetCurrentPositionId",
    "SetTargetPositionId",
    "GetTargetPositionId",
    "SetRelativeTargetPositionId",
    "SetVelocityId",
    "GetVelocityId",
    "SetVelocityAndStepsId",
    "StartPathId",
    "SetHAEnableId",
    "GetHAEnableId",
    "SetHAModeId",
    "GetHAModeId",
    "SetHAIpAddressId",
    "GetHAIpAddressId",
    "SetHAVelocitySwitchOnSpeedId",
    "GetHAVelocitySwitchOnSpeedId",
    "SetHAVelocitySwitchOffSpeedId",
    "GetHAVelocitySwitchOffSpeedId",
    "SetHAPositionSwitchOnPositionId",
    "GetHAPositionSwitchOnPositionId",
    "SetHAPositionSwitchOffPositionId",
    "GetHAPositionSwitchOffPositionId",
    "SetHAVelocitySliderMinId",
    "GetHAVelocitySliderMinId",
    "SetHAVelocitySliderMaxId",
    "GetHAVelocitySliderMaxId",
    "SetHAPositionSliderMinId",
    "GetHAPositionSliderMinId",
    "SetHAPositionSliderMaxId",
    "GetHAPositionSliderMaxId",
    "SetHAMqttUserId",
    "GetHAMqttUserId",
    "SetHAMqttPasswordId",
    "GetHAMqttPasswordId",
    "SetHAMqttNameId",
    "GetHAMqttNameId",
    "SetHAMqttIconId",
    "GetHAMqttIconId",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageId(MessageId e) {
  if (::flatbuffers::IsOutRange(e, MessageId_GetVersionId, MessageId_GetHAMqttIconId)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageId()[index];
}

struct Header FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SYNC_BYTES = 4,
    VT_MESSAGE_TYPE = 6,
    VT_BODY_SIZE = 8
  };
  uint32_t sync_bytes() const {
    return GetField<uint32_t>(VT_SYNC_BYTES, 0);
  }
  uint16_t message_type() const {
    return GetField<uint16_t>(VT_MESSAGE_TYPE, 0);
  }
  uint16_t body_size() const {
    return GetField<uint16_t>(VT_BODY_SIZE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SYNC_BYTES, 4) &&
           VerifyField<uint16_t>(verifier, VT_MESSAGE_TYPE, 2) &&
           VerifyField<uint16_t>(verifier, VT_BODY_SIZE, 2) &&
           verifier.EndTable();
  }
};

struct HeaderBuilder {
  typedef Header Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_sync_bytes(uint32_t sync_bytes) {
    fbb_.AddElement<uint32_t>(Header::VT_SYNC_BYTES, sync_bytes, 0);
  }
  void add_message_type(uint16_t message_type) {
    fbb_.AddElement<uint16_t>(Header::VT_MESSAGE_TYPE, message_type, 0);
  }
  void add_body_size(uint16_t body_size) {
    fbb_.AddElement<uint16_t>(Header::VT_BODY_SIZE, body_size, 0);
  }
  explicit HeaderBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Header> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Header>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Header> CreateHeader(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t sync_bytes = 0,
    uint16_t message_type = 0,
    uint16_t body_size = 0) {
  HeaderBuilder builder_(_fbb);
  builder_.add_sync_bytes(sync_bytes);
  builder_.add_body_size(body_size);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

struct Footer FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FooterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHECKSUM = 4
  };
  uint16_t checksum() const {
    return GetField<uint16_t>(VT_CHECKSUM, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_CHECKSUM, 2) &&
           verifier.EndTable();
  }
};

struct FooterBuilder {
  typedef Footer Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_checksum(uint16_t checksum) {
    fbb_.AddElement<uint16_t>(Footer::VT_CHECKSUM, checksum, 0);
  }
  explicit FooterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Footer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Footer>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Footer> CreateFooter(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint16_t checksum = 0) {
  FooterBuilder builder_(_fbb);
  builder_.add_checksum(checksum);
  return builder_.Finish();
}

}  // namespace AxisDriver

#endif  // FLATBUFFERS_GENERATED_AXISMESSAGESCOMMON_AXISDRIVER_H_
