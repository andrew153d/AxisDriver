# automatically generated by the FlatBuffers compiler, do not modify

# namespace: AxisDriver

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Header(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Header()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHeader(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Header
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Header
    def SyncBytes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Header
    def MessageType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def HeaderStart(builder):
    builder.StartObject(2)

def Start(builder):
    HeaderStart(builder)

def HeaderAddSyncBytes(builder, syncBytes):
    builder.PrependUint32Slot(0, syncBytes, 0)

def AddSyncBytes(builder, syncBytes):
    HeaderAddSyncBytes(builder, syncBytes)

def HeaderAddMessageType(builder, messageType):
    builder.PrependUint16Slot(1, messageType, 0)

def AddMessageType(builder, messageType):
    HeaderAddMessageType(builder, messageType)

def HeaderEnd(builder):
    return builder.EndObject()

def End(builder):
    return HeaderEnd(builder)
