# automatically generated by the FlatBuffers compiler, do not modify

# namespace: AxisDriver

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MacAddressMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MacAddressMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMacAddressMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MacAddressMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MacAddressMessage
    def MacAddress(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # MacAddressMessage
    def MacAddressAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # MacAddressMessage
    def MacAddressLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # MacAddressMessage
    def MacAddressIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def MacAddressMessageStart(builder):
    builder.StartObject(1)

def Start(builder):
    MacAddressMessageStart(builder)

def MacAddressMessageAddMacAddress(builder, macAddress):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(macAddress), 0)

def AddMacAddress(builder, macAddress):
    MacAddressMessageAddMacAddress(builder, macAddress)

def MacAddressMessageStartMacAddressVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartMacAddressVector(builder, numElems):
    return MacAddressMessageStartMacAddressVector(builder, numElems)

def MacAddressMessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return MacAddressMessageEnd(builder)
