# automatically generated by the FlatBuffers compiler, do not modify

# namespace: AxisDriver

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VersionMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VersionMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVersionMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VersionMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VersionMessage
    def Major(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # VersionMessage
    def Minor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # VersionMessage
    def Patch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

def VersionMessageStart(builder):
    builder.StartObject(3)

def Start(builder):
    VersionMessageStart(builder)

def VersionMessageAddMajor(builder, major):
    builder.PrependUint16Slot(0, major, 0)

def AddMajor(builder, major):
    VersionMessageAddMajor(builder, major)

def VersionMessageAddMinor(builder, minor):
    builder.PrependUint16Slot(1, minor, 0)

def AddMinor(builder, minor):
    VersionMessageAddMinor(builder, minor)

def VersionMessageAddPatch(builder, patch):
    builder.PrependUint16Slot(2, patch, 0)

def AddPatch(builder, patch):
    VersionMessageAddPatch(builder, patch)

def VersionMessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return VersionMessageEnd(builder)
